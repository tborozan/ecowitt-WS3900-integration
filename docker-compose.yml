version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: weather-postgres
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    networks:
      - weather-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # C# Weather API (.NET 9)
  weather-api:
    build:
      context: ./ZavrsniRad.Api
      dockerfile: Dockerfile
    container_name: weather-api
    ports:
      - "8080:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - weather-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:10.0.0
    container_name: weather-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - postgres
    networks:
      - weather-network
    restart: unless-stopped

volumes:
  postgres_data:
  grafana_data:

networks:
  weather-network:
    driver: bridge